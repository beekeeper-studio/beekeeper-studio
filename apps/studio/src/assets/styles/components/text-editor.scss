// --- Common Button and Toggle Mixins ---
@mixin bks-icon-btn($tooltip) {
  display: inline-flex !important;
  align-items: center;
  justify-content: center;
  flex: 0 0 $bks-toggle-size;
  width: $bks-toggle-size;
  height: $bks-toggle-size;
  min-width: $bks-toggle-size;
  max-width: $bks-toggle-size;
  min-height: $bks-toggle-size;
  max-height: $bks-toggle-size;
  box-sizing: border-box;
  margin: 0 $bks-toggle-gap-x 0 0;
  padding: 0;
  border-radius: $bks-toggle-radius;
  border: 1px solid rgba($theme-base, 0.32);
  background: transparent;
  font-size: 0; // hide text label
  line-height: 0;
  overflow: hidden;
  white-space: nowrap;
  cursor: pointer;
  transition: background-color 120ms ease, border-color 120ms ease;
  position: relative;
  @include bks-hover-tooltip($tooltip);
}

@mixin bks-icon-btn-hover {
  border-color: rgba($theme-base, 0.5);
  background: rgba($theme-base, 0.06);
}

@mixin bks-icon-btn-focus {
  outline: 2px solid rgba($theme-base, 0.5);
  outline-offset: 2px;
}
@import "./text-editor-plugins/partial-read-only.scss";

// Shared search panel UI variables and mixins
$bks-toggle-size: 20px !default;
$bks-toggle-radius: 4px !default;
$bks-toggle-gap-x: 2px !default;

@mixin bks-toggle-label() {
  position: relative;
  display: inline-flex;
  align-items: center;
  gap: 0;
  margin: 0 $bks-toggle-gap-x 0 0;
  color: transparent;
  font-size: 0; // prevent hidden text from occupying space
  white-space: nowrap;
  user-select: none;
}
@mixin bks-toggle-input() {
  position: absolute;
  inset: 0;
  margin: 0;
  width: 100%;
  height: 100%;
  opacity: 0;
  cursor: pointer;
}
@mixin bks-toggle-box-base() {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: $bks-toggle-size;
  height: $bks-toggle-size;
  border-radius: $bks-toggle-radius;
  border: 1px solid rgba($theme-base, 0.32);
  background: transparent;
  color: rgba($theme-base, 0.9);
  font-size: 12px;
  font-weight: 600;
  line-height: 1;
  transition: background-color 120ms ease, color 120ms ease, border-color 120ms ease;
}
// Tooltip helper for icon-only controls
@mixin bks-hover-tooltip($text) {
  &::before {
    content: $text;
    position: absolute;
    left: 50%;
    top: calc(100% + 8px);
    transform: translateX(-50%) translateY(-2px);
    background: rgba(0, 0, 0, 0.8);
    color: #fff;
    font-size: 11px;
    font-weight: 500;
    padding: 3px 6px;
    border-radius: 4px;
    white-space: nowrap;
    pointer-events: none;
    opacity: 0;
    visibility: hidden;
    z-index: 10;
    transition: opacity 120ms ease, transform 120ms ease, visibility 120ms linear;
  }
  &:hover::before {
    opacity: 1;
    visibility: visible;
    transform: translateX(-50%) translateY(0);
  }
}

.BksTextEditor {
  padding: 0.75rem 0;
  &.remove-json-root-brackets .CodeMirror-code {
    & > div:first-child, & > div:last-child {
      display: none;
    }
  }

  .cm-foldgutter {
    font-weight: normal;
  }

  .cm-lineGutter-changed {
    border-left: 2px solid $brand-warning;
  }

  .CodeMirror-guttermaker-subtle {
    color: rgba($theme-base, 0.25);
  }

  .cm-completionMatchedText {
    text-decoration: none;
    font-weight: 700;
  }

  .bks-error-marker {
    text-decoration-line: underline;
    text-decoration-style: wavy;
    text-decoration-color: rgba($brand-danger, 0.6);
  }

  // Hide specific CodeMirror search panel controls
  .cm-panel.cm-search {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 4px;
    overflow: visible; 
    > input[type="text"],
    > input.cm-textfield,
    > .cm-textfield {
      flex: 1 1 280px;
      min-width: 140px;
      max-width: none;
    }
    label:has(> input[type="checkbox"]) {
      margin-left: 0 !important;
      padding-left: 0 !important;
    }
    $bks-hide-btns: ("next", "prev", "replaceAll", "all", "select", "selectMatches", "selectAll", "close");
    @each $btn in $bks-hide-btns {
      button[name="#{$btn}"],
      .cm-button[name="#{$btn}"],
      button[aria-label*="#{$btn}" i],
      .cm-button[aria-label*="#{$btn}" i],
      button[title*="#{$btn}" i],
      .cm-button[title*="#{$btn}" i] {
        display: none !important;
      }
    }

    button[name="replace"],
    .cm-button[name="replace"],
    button[aria-label="replace" i],
    .cm-button[aria-label="replace" i] {
      order: 100;
      margin-left: auto; 
    }
    button[name="replaceAll"],
    .cm-button[name="replaceAll"],
    button[aria-label*="replace all" i],
    .cm-button[aria-label*="replace all" i] {
      order: 101; 
    }

    .bks-json-menu {
      order: 102;
      margin-left: 2px;
      position: relative;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: auto;
      height: auto;
      min-width: 0;
      min-height: 0;
      border: 0;
      background: transparent;
      cursor: pointer;
      line-height: 1;
      padding: 0;
      @include bks-hover-tooltip("More options");
    }
    .bks-json-menu::after {
      content: "â‹®"; 
      font-size: 12px;
      line-height: 1;
      color: rgba($theme-base, 0.9);
    }
    .bks-json-menu:hover { background: rgba($theme-base, 0.06); }
    .bks-json-menu:focus-visible { outline: 2px solid rgba($theme-base, 0.5); outline-offset: 2px; }
    .bks-json-menu.open { background: rgba($theme-base, 0.08); }
    .bks-json-menu-popover {
      position: absolute;
      top: calc(100% + 6px);
      right: 0;
      min-width: 200px;
      background: #1f1f1f;
      color: #fff;
      border: 1px solid rgba($theme-base, 0.25);
      border-radius: 6px;
      padding: 4px;
      display: none;
      box-shadow: 0 8px 24px rgba(0,0,0,0.25);
      z-index: 100;
    }
    .bks-json-menu.open > .bks-json-menu-popover { display: block; }
    .bks-json-menu-item {
      width: 100%;
      text-align: left;
      background: transparent;
      color: inherit;
      border: 0;
      border-radius: 4px;
      padding: 6px 8px;
      cursor: pointer;
      font-size: 12px;
    }
    .bks-json-menu-item:hover { background: rgba(255,255,255,0.08); }

    // When toggled off, hide replace controls (UI only)
    &.bks-hide-replace {
      > input[type="text"]:nth-of-type(2),
      > input.cm-textfield:nth-of-type(2),
      > .cm-textfield:nth-of-type(2),
      button[name="replace"],
      .cm-button[name="replace"],
      button[name="replaceAll"],
      .cm-button[name="replaceAll"] {
        display: none !important;
      }
    }

    // (tooltip mixin defined globally)

    // Show Replace and Replace All using the same box style as toggles
    // Replace
    $bks-icon-btns: (
      "replace": ("Replace", "redo"),
      "replaceAll": ("Replace All", "find_replace")
    );
    @each $btn, $data in $bks-icon-btns {
      $label: nth($data, 1);
      $icon: nth($data, 2);
      button[name="#{$btn}"],
      .cm-button[name="#{$btn}"],
      button[aria-label*="#{$btn}" i],
      .cm-button[aria-label*="#{$btn}" i] {
        @include bks-icon-btn($label);
      }
      button[name="#{$btn}"]::after,
      .cm-button[name="#{$btn}"]::after,
      button[aria-label*="#{$btn}" i]::after,
      .cm-button[aria-label*="#{$btn}" i]::after {
        content: $icon;
        font-family: "Material Icons";
        font-weight: normal;
        font-style: normal;
        font-size: 12px;
        line-height: 1;
        letter-spacing: normal;
        text-transform: none;
        display: inline-block;
        white-space: nowrap;
        word-wrap: normal;
        direction: ltr;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        font-feature-settings: "liga";
        color: rgba($theme-base, 0.9);
      }
      button[name="#{$btn}"]:hover,
      .cm-button[name="#{$btn}"]:hover,
      button[aria-label*="#{$btn}" i]:hover,
      .cm-button[aria-label*="#{$btn}" i]:hover {
        @include bks-icon-btn-hover;
      }
      button[name="#{$btn}"]:focus-visible,
      .cm-button[name="#{$btn}"]:focus-visible,
      button[aria-label*="#{$btn}" i]:focus-visible,
      .cm-button[aria-label*="#{$btn}" i]:focus-visible {
        @include bks-icon-btn-focus;
      }
    }

    // Toggle label/checkboxes (case, regexp, word, whole)
    @mixin bks-toggle-label-group($name, $glyph, $tooltip) {
      label:has(> input[name=#{$name}]) {
        @include bks-toggle-label();
        @include bks-hover-tooltip($tooltip);
      }
      label:has(> input[name=#{$name}]) > input[type="checkbox"] {
        @include bks-toggle-input();
      }
      label:has(> input[name=#{$name}])::after {
        @include bks-toggle-box-base();
        content: $glyph;
        @if $name == "case" { padding-bottom: 1px; }
      }
      label:has(> input[name=#{$name}]):hover::after {
        border-color: rgba($theme-base, 0.5);
        background: rgba($theme-base, 0.06);
      }
      label:has(> input[name=#{$name}]:focus-visible)::after {
        outline: 2px solid rgba($theme-base, 0.5);
        outline-offset: 2px;
      }
      label:has(> input[name=#{$name}]:checked)::after {
        background: rgba($theme-base, 0.18);
        border-color: rgba($theme-base, 0.55);
      }
    }
    @include bks-toggle-label-group("case", "Aa", "Match Case");
    @include bks-toggle-label-group("regexp", ".*", "Use Regular Expression");
    @include bks-toggle-label-group("re", ".*", "Use Regular Expression");
    @include bks-toggle-label-group("word", "ab", "Match Whole Word");
    @include bks-toggle-label-group("whole", "ab", "Match Whole Word");
  }
}
