{"acl":{"summary":"A container for Access List Control commands.","tokens":[]},"acl cat":{"summary":"Lists the ACL categories, or the commands inside a category.","tokens":[]},"acl deluser":{"summary":"Deletes ACL users, and terminates their connections.","tokens":[]},"acl genpass":{"summary":"Generates a pseudorandom, secure password that can be used to identify ACL users.","tokens":[]},"acl getuser":{"summary":"Lists the ACL rules of a user.","tokens":[]},"acl help":{"summary":"Returns helpful text about the different subcommands.","tokens":[]},"acl list":{"summary":"Dumps the effective rules in ACL file format.","tokens":[]},"acl load":{"summary":"Reloads the rules from the configured ACL file.","tokens":[]},"acl log":{"summary":"Lists recent security events generated due to ACL rules.","tokens":["reset"]},"acl save":{"summary":"Saves the effective ACL rules in the configured ACL file.","tokens":[]},"acl setuser":{"summary":"Creates and modifies an ACL user and its rules.","tokens":[]},"acl users":{"summary":"Lists all ACL users.","tokens":[]},"acl whoami":{"summary":"Returns the authenticated username of the current connection.","tokens":[]},"append":{"summary":"Appends a string to the value of a key. Creates the key if it doesn't exist.","tokens":[]},"auth":{"summary":"Authenticates the connection.","tokens":[]},"bf.add":{"tokens":[]},"bf.card":{"tokens":[]},"bf.debug":{"tokens":[]},"bf.exists":{"tokens":[]},"bf.info":{"tokens":[]},"bf.insert":{"tokens":[]},"bf.loadchunk":{"tokens":[]},"bf.madd":{"tokens":[]},"bf.mexists":{"tokens":[]},"bf.reserve":{"tokens":[]},"bf.scandump":{"tokens":[]},"bitcount":{"summary":"Counts the number of set bits (population counting) in a string.","tokens":["byte","bit"]},"bitfield":{"summary":"Performs arbitrary bitfield integer operations on strings.","tokens":["get","overflow","wrap","sat","fail","set","incrby"]},"bitfield_ro":{"summary":"Performs arbitrary read-only bitfield integer operations on strings.","tokens":["get"]},"bitop":{"summary":"Performs bitwise operations on multiple strings, and stores the result.","tokens":["and","or","xor","not"]},"bitpos":{"summary":"Finds the first set (1) or clear (0) bit in a string.","tokens":["byte","bit"]},"blmove":{"summary":"Pops an element from a list, pushes it to another list and returns it. Blocks until an element is available otherwise. Deletes the list if the last element was moved.","tokens":["left","right","left","right"]},"blmpop":{"summary":"Pops the first element from one of multiple lists. Blocks until an element is available otherwise. Deletes the list if the last element was popped.","tokens":["left","right","count"]},"blpop":{"summary":"Removes and returns the first element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped.","tokens":[]},"brpop":{"summary":"Removes and returns the last element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped.","tokens":[]},"brpoplpush":{"summary":"Pops an element from a list, pushes it to another list and returns it. Block until an element is available otherwise. Deletes the list if the last element was popped.","tokens":[]},"bzmpop":{"summary":"Removes and returns a member by score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.","tokens":["min","max","count"]},"bzpopmax":{"summary":"Removes and returns the member with the highest score from one or more sorted sets. Blocks until a member available otherwise.  Deletes the sorted set if the last element was popped.","tokens":[]},"bzpopmin":{"summary":"Removes and returns the member with the lowest score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.","tokens":[]},"cf.add":{"tokens":[]},"cf.addnx":{"tokens":[]},"cf.compact":{"tokens":[]},"cf.count":{"tokens":[]},"cf.debug":{"tokens":[]},"cf.del":{"tokens":[]},"cf.exists":{"tokens":[]},"cf.info":{"tokens":[]},"cf.insert":{"tokens":[]},"cf.insertnx":{"tokens":[]},"cf.loadchunk":{"tokens":[]},"cf.mexists":{"tokens":[]},"cf.reserve":{"tokens":[]},"cf.scandump":{"tokens":[]},"client":{"summary":"A container for client connection commands.","tokens":[]},"client getname":{"summary":"Returns the name of the connection.","tokens":[]},"client help":{"summary":"Returns helpful text about the different subcommands.","tokens":[]},"client id":{"summary":"Returns the unique client ID of the connection.","tokens":[]},"client info":{"summary":"Returns information about the connection.","tokens":[]},"client kill":{"summary":"Terminates open connections.","tokens":["id","type","normal","master","slave","replica","pubsub","user","addr","laddr","skipme","yes","no","maxage"]},"client list":{"summary":"Lists open connections.","tokens":["type","normal","master","replica","pubsub","id"]},"client no-touch":{"summary":"Controls whether commands sent by the client affect the LRU/LFU of accessed keys.","tokens":["on","off"]},"client setinfo":{"summary":"Sets information specific to the client or connection.","tokens":["lib-name","lib-ver"]},"client setname":{"summary":"Sets the connection name.","tokens":[]},"client unblock":{"summary":"Unblocks a client blocked by a blocking command from a different connection.","tokens":["timeout","error"]},"cluster":{"summary":"A container for Redis Cluster commands.","tokens":[]},"cluster help":{"summary":"Returns helpful text about the different subcommands.","tokens":[]},"cluster info":{"summary":"Returns information about the state of a node.","tokens":[]},"cluster keyslot":{"summary":"Returns the hash slot for a key.","tokens":[]},"cluster myshardid":{"summary":"Returns the shard ID of a node.","tokens":[]},"cluster nodes":{"summary":"Returns the cluster configuration for a node.","tokens":[]},"cluster set-config-epoch":{"summary":"Sets the configuration epoch for a new node.","tokens":[]},"cluster shards":{"summary":"Returns the mapping of cluster slots to shards.","tokens":[]},"cluster slots":{"summary":"Returns the mapping of cluster slots to nodes.","tokens":[]},"cms.incrby":{"tokens":[]},"cms.info":{"tokens":[]},"cms.initbydim":{"tokens":[]},"cms.initbyprob":{"tokens":[]},"cms.merge":{"tokens":[]},"cms.query":{"tokens":[]},"command":{"summary":"Returns detailed information about all commands.","tokens":[]},"command count":{"summary":"Returns a count of commands.","tokens":[]},"command docs":{"summary":"Returns documentary information about one, multiple or all commands.","tokens":[]},"command getkeys":{"summary":"Extracts the key names from an arbitrary command.","tokens":[]},"command getkeysandflags":{"summary":"Extracts the key names and access flags for an arbitrary command.","tokens":[]},"command help":{"summary":"Returns helpful text about the different subcommands.","tokens":[]},"command info":{"summary":"Returns information about one, multiple or all commands.","tokens":[]},"command list":{"summary":"Returns a list of command names.","tokens":["filterby","module","aclcat","pattern"]},"config":{"summary":"A container for server configuration commands.","tokens":[]},"config get":{"summary":"Returns the effective values of configuration parameters.","tokens":[]},"config help":{"summary":"Returns helpful text about the different subcommands.","tokens":[]},"config resetstat":{"summary":"Resets the server's statistics.","tokens":[]},"config rewrite":{"summary":"Persists the effective configuration to file.","tokens":[]},"config set":{"summary":"Sets configuration parameters in-flight.","tokens":[]},"copy":{"summary":"Copies the value of a key to a new key.","tokens":["db","replace"]},"dbsize":{"summary":"Returns the number of keys in the database.","tokens":[]},"decr":{"summary":"Decrements the integer value of a key by one. Uses 0 as initial value if the key doesn't exist.","tokens":[]},"decrby":{"summary":"Decrements a number from the integer value of a key. Uses 0 as initial value if the key doesn't exist.","tokens":[]},"del":{"summary":"Deletes one or more keys.","tokens":[]},"discard":{"summary":"Discards a transaction.","tokens":[]},"dump":{"summary":"Returns a serialized representation of the value stored at a key.","tokens":[]},"echo":{"summary":"Returns the given string.","tokens":[]},"eval":{"summary":"Executes a server-side Lua script.","tokens":[]},"eval_ro":{"summary":"Executes a read-only server-side Lua script.","tokens":[]},"evalsha":{"summary":"Executes a server-side Lua script by SHA1 digest.","tokens":[]},"evalsha_ro":{"summary":"Executes a read-only server-side Lua script by SHA1 digest.","tokens":[]},"exec":{"summary":"Executes all commands in a transaction.","tokens":[]},"exists":{"summary":"Determines whether one or more keys exist.","tokens":[]},"expire":{"summary":"Sets the expiration time of a key in seconds.","tokens":["nx","xx","gt","lt"]},"expireat":{"summary":"Sets the expiration time of a key to a Unix timestamp.","tokens":["nx","xx","gt","lt"]},"expiretime":{"summary":"Returns the expiration time of a key as a Unix timestamp.","tokens":[]},"fcall":{"summary":"Invokes a function.","tokens":[]},"fcall_ro":{"summary":"Invokes a read-only function.","tokens":[]},"flushall":{"summary":"Removes all keys from all databases.","tokens":["async","sync"]},"flushdb":{"summary":"Remove all keys from the current database.","tokens":["async","sync"]},"ft._aliasaddifnx":{"tokens":[]},"ft._aliasdelifx":{"tokens":[]},"ft._alterifnx":{"tokens":[]},"ft._createifnx":{"tokens":[]},"ft._dropifx":{"tokens":[]},"ft._dropindexifx":{"tokens":[]},"ft._list":{"tokens":[]},"ft.add":{"tokens":[]},"ft.aggregate":{"tokens":[]},"ft.aliasadd":{"tokens":[]},"ft.aliasdel":{"tokens":[]},"ft.aliasupdate":{"tokens":[]},"ft.alter":{"tokens":[]},"ft.config":{"tokens":[]},"ft.create":{"tokens":[]},"ft.cursor":{"tokens":[]},"ft.debug":{"tokens":[]},"ft.debug bg_scan_controller":{"tokens":[]},"ft.debug delete_local_cursors":{"tokens":[]},"ft.debug docidtoid":{"tokens":[]},"ft.debug docinfo":{"tokens":[]},"ft.debug dump_geomidx":{"tokens":[]},"ft.debug dump_hnsw":{"tokens":[]},"ft.debug dump_invidx":{"tokens":[]},"ft.debug dump_numidx":{"tokens":[]},"ft.debug dump_numidxtree":{"tokens":[]},"ft.debug dump_phonetic_hash":{"tokens":[]},"ft.debug dump_prefix_trie":{"tokens":[]},"ft.debug dump_suffix_trie":{"tokens":[]},"ft.debug dump_tagidx":{"tokens":[]},"ft.debug dump_terms":{"tokens":[]},"ft.debug ft.aggregate":{"tokens":[]},"ft.debug ft.search":{"tokens":[]},"ft.debug gc_clean_numeric":{"tokens":[]},"ft.debug gc_continue_schedule":{"tokens":[]},"ft.debug gc_forcebginvoke":{"tokens":[]},"ft.debug gc_forceinvoke":{"tokens":[]},"ft.debug gc_stop_schedule":{"tokens":[]},"ft.debug gc_wait_for_jobs":{"tokens":[]},"ft.debug get_hide_user_data_from_logs":{"tokens":[]},"ft.debug git_sha":{"tokens":[]},"ft.debug help":{"tokens":[]},"ft.debug idtodocid":{"tokens":[]},"ft.debug indexer_sleep_before_yield_micros":{"tokens":[]},"ft.debug indexes":{"tokens":[]},"ft.debug info":{"tokens":[]},"ft.debug info_tagidx":{"tokens":[]},"ft.debug invidx_summary":{"tokens":[]},"ft.debug numidx_summary":{"tokens":[]},"ft.debug spec_invidxes_info":{"tokens":[]},"ft.debug ttl":{"tokens":[]},"ft.debug ttl_expire":{"tokens":[]},"ft.debug ttl_pause":{"tokens":[]},"ft.debug vecsim_info":{"tokens":[]},"ft.debug workers":{"tokens":[]},"ft.debug yields_on_load_counter":{"tokens":[]},"ft.del":{"tokens":[]},"ft.dictadd":{"tokens":[]},"ft.dictdel":{"tokens":[]},"ft.dictdump":{"tokens":[]},"ft.drop":{"tokens":[]},"ft.dropindex":{"tokens":[]},"ft.explain":{"tokens":[]},"ft.explaincli":{"tokens":[]},"ft.get":{"tokens":[]},"ft.info":{"tokens":[]},"ft.mget":{"tokens":[]},"ft.profile":{"tokens":[]},"ft.safeadd":{"tokens":[]},"ft.search":{"tokens":[]},"ft.spellcheck":{"tokens":[]},"ft.sugadd":{"tokens":[]},"ft.sugdel":{"tokens":[]},"ft.sugget":{"tokens":[]},"ft.suglen":{"tokens":[]},"ft.synadd":{"tokens":[]},"ft.syndump":{"tokens":[]},"ft.synupdate":{"tokens":[]},"ft.tagvals":{"tokens":[]},"function":{"summary":"A container for function commands.","tokens":[]},"function delete":{"summary":"Deletes a library and its functions.","tokens":[]},"function dump":{"summary":"Dumps all libraries into a serialized binary payload.","tokens":[]},"function flush":{"summary":"Deletes all libraries and functions.","tokens":["async","sync"]},"function help":{"summary":"Returns helpful text about the different subcommands.","tokens":[]},"function kill":{"summary":"Terminates a function during execution.","tokens":[]},"function list":{"summary":"Returns information about all libraries.","tokens":["libraryname","withcode"]},"function load":{"summary":"Creates a library.","tokens":["replace"]},"function restore":{"summary":"Restores all libraries from a payload.","tokens":["flush","append","replace"]},"geoadd":{"summary":"Adds one or more members to a geospatial index. The key is created if it doesn't exist.","tokens":["nx","xx","ch"]},"geodist":{"summary":"Returns the distance between two members of a geospatial index.","tokens":["m","km","ft","mi"]},"geohash":{"summary":"Returns members from a geospatial index as geohash strings.","tokens":[]},"geopos":{"summary":"Returns the longitude and latitude of members from a geospatial index.","tokens":[]},"georadius":{"summary":"Queries a geospatial index for members within a distance from a coordinate, optionally stores the result.","tokens":["m","km","ft","mi","withcoord","withdist","withhash","count","any","asc","desc","store","storedist"]},"georadius_ro":{"summary":"Returns members from a geospatial index that are within a distance from a coordinate.","tokens":["m","km","ft","mi","withcoord","withdist","withhash","count","any","asc","desc"]},"georadiusbymember":{"summary":"Queries a geospatial index for members within a distance from a member, optionally stores the result.","tokens":["m","km","ft","mi","withcoord","withdist","withhash","count","any","asc","desc","store","storedist"]},"georadiusbymember_ro":{"summary":"Returns members from a geospatial index that are within a distance from a member.","tokens":["m","km","ft","mi","withcoord","withdist","withhash","count","any","asc","desc"]},"geosearch":{"summary":"Queries a geospatial index for members inside an area of a box or a circle.","tokens":["frommember","fromlonlat","byradius","m","km","ft","mi","bybox","m","km","ft","mi","asc","desc","count","any","withcoord","withdist","withhash"]},"geosearchstore":{"summary":"Queries a geospatial index for members inside an area of a box or a circle, optionally stores the result.","tokens":["frommember","fromlonlat","byradius","m","km","ft","mi","bybox","m","km","ft","mi","asc","desc","count","any","storedist"]},"get":{"summary":"Returns the string value of a key.","tokens":[]},"getbit":{"summary":"Returns a bit value by offset.","tokens":[]},"getdel":{"summary":"Returns the string value of a key after deleting the key.","tokens":[]},"getex":{"summary":"Returns the string value of a key after setting its expiration time.","tokens":["ex","px","exat","pxat","persist"]},"getrange":{"summary":"Returns a substring of the string stored at a key.","tokens":[]},"getset":{"summary":"Returns the previous string value of a key after setting it to a new value.","tokens":[]},"hdel":{"summary":"Deletes one or more fields and their values from a hash. Deletes the hash if no fields remain.","tokens":[]},"hello":{"summary":"Handshakes with the Redis server.","tokens":["auth","setname"]},"hexists":{"summary":"Determines whether a field exists in a hash.","tokens":[]},"hexpire":{"summary":"Set expiry for hash field using relative time to expire (seconds)","tokens":["nx","xx","gt","lt","fields"]},"hexpireat":{"summary":"Set expiry for hash field using an absolute Unix timestamp (seconds)","tokens":["nx","xx","gt","lt","fields"]},"hexpiretime":{"summary":"Returns the expiration time of a hash field as a Unix timestamp, in seconds.","tokens":["fields"]},"hget":{"summary":"Returns the value of a field in a hash.","tokens":[]},"hgetall":{"summary":"Returns all fields and values in a hash.","tokens":[]},"hincrby":{"summary":"Increments the integer value of a field in a hash by a number. Uses 0 as initial value if the field doesn't exist.","tokens":[]},"hincrbyfloat":{"summary":"Increments the floating point value of a field by a number. Uses 0 as initial value if the field doesn't exist.","tokens":[]},"hkeys":{"summary":"Returns all fields in a hash.","tokens":[]},"hlen":{"summary":"Returns the number of fields in a hash.","tokens":[]},"hmget":{"summary":"Returns the values of all fields in a hash.","tokens":[]},"hmset":{"summary":"Sets the values of multiple fields.","tokens":[]},"hpersist":{"summary":"Removes the expiration time for each specified field","tokens":["fields"]},"hpexpire":{"summary":"Set expiry for hash field using relative time to expire (milliseconds)","tokens":["nx","xx","gt","lt","fields"]},"hpexpireat":{"summary":"Set expiry for hash field using an absolute Unix timestamp (milliseconds)","tokens":["nx","xx","gt","lt","fields"]},"hpexpiretime":{"summary":"Returns the expiration time of a hash field as a Unix timestamp, in msec.","tokens":["fields"]},"hpttl":{"summary":"Returns the TTL in milliseconds of a hash field.","tokens":["fields"]},"hrandfield":{"summary":"Returns one or more random fields from a hash.","tokens":["withvalues"]},"hscan":{"summary":"Iterates over fields and values of a hash.","tokens":["match","count","novalues"]},"hset":{"summary":"Creates or modifies the value of a field in a hash.","tokens":[]},"hsetnx":{"summary":"Sets the value of a field in a hash only when the field doesn't exist.","tokens":[]},"hstrlen":{"summary":"Returns the length of the value of a field.","tokens":[]},"httl":{"summary":"Returns the TTL in seconds of a hash field.","tokens":["fields"]},"hvals":{"summary":"Returns all values in a hash.","tokens":[]},"incr":{"summary":"Increments the integer value of a key by one. Uses 0 as initial value if the key doesn't exist.","tokens":[]},"incrby":{"summary":"Increments the integer value of a key by a number. Uses 0 as initial value if the key doesn't exist.","tokens":[]},"incrbyfloat":{"summary":"Increment the floating point value of a key by a number. Uses 0 as initial value if the key doesn't exist.","tokens":[]},"info":{"summary":"Returns information and statistics about the server.","tokens":[]},"json.arrappend":{"tokens":[]},"json.arrindex":{"tokens":[]},"json.arrinsert":{"tokens":[]},"json.arrlen":{"tokens":[]},"json.arrpop":{"tokens":[]},"json.arrtrim":{"tokens":[]},"json.clear":{"tokens":[]},"json.debug":{"tokens":[]},"json.del":{"tokens":[]},"json.forget":{"tokens":[]},"json.get":{"tokens":[]},"json.merge":{"tokens":[]},"json.mget":{"tokens":[]},"json.mset":{"tokens":[]},"json.numincrby":{"tokens":[]},"json.nummultby":{"tokens":[]},"json.numpowby":{"tokens":[]},"json.objkeys":{"tokens":[]},"json.objlen":{"tokens":[]},"json.resp":{"tokens":[]},"json.set":{"tokens":[]},"json.strappend":{"tokens":[]},"json.strlen":{"tokens":[]},"json.toggle":{"tokens":[]},"json.type":{"tokens":[]},"keys":{"summary":"Returns all key names that match a pattern.","tokens":[]},"lcs":{"summary":"Finds the longest common substring.","tokens":["len","idx","minmatchlen","withmatchlen"]},"lindex":{"summary":"Returns an element from a list by its index.","tokens":[]},"linsert":{"summary":"Inserts an element before or after another element in a list.","tokens":["before","after"]},"llen":{"summary":"Returns the length of a list.","tokens":[]},"lmove":{"summary":"Returns an element after popping it from one list and pushing it to another. Deletes the list if the last element was moved.","tokens":["left","right","left","right"]},"lmpop":{"summary":"Returns multiple elements from a list after removing them. Deletes the list if the last element was popped.","tokens":["left","right","count"]},"lpop":{"summary":"Returns the first elements in a list after removing it. Deletes the list if the last element was popped.","tokens":[]},"lpos":{"summary":"Returns the index of matching elements in a list.","tokens":["rank","count","maxlen"]},"lpush":{"summary":"Prepends one or more elements to a list. Creates the key if it doesn't exist.","tokens":[]},"lpushx":{"summary":"Prepends one or more elements to a list only when the list exists.","tokens":[]},"lrange":{"summary":"Returns a range of elements from a list.","tokens":[]},"lrem":{"summary":"Removes elements from a list. Deletes the list if the last element was removed.","tokens":[]},"lset":{"summary":"Sets the value of an element in a list by its index.","tokens":[]},"ltrim":{"summary":"Removes elements from both ends a list. Deletes the list if all elements were trimmed.","tokens":[]},"memory":{"summary":"A container for memory diagnostics commands.","tokens":[]},"memory help":{"summary":"Returns helpful text about the different subcommands.","tokens":[]},"memory usage":{"summary":"Estimates the memory usage of a key.","tokens":["samples"]},"mget":{"summary":"Atomically returns the string values of one or more keys.","tokens":[]},"module":{"summary":"A container for module commands.","tokens":[]},"module list":{"summary":"Returns all loaded modules.","tokens":[]},"monitor":{"summary":"Listens for all requests received by the server in real-time.","tokens":[]},"mset":{"summary":"Atomically creates or modifies the string values of one or more keys.","tokens":[]},"msetnx":{"summary":"Atomically modifies the string values of one or more keys only when all keys don't exist.","tokens":[]},"multi":{"summary":"Starts a transaction.","tokens":[]},"object":{"summary":"A container for object introspection commands.","tokens":[]},"object encoding":{"summary":"Returns the internal encoding of a Redis object.","tokens":[]},"object freq":{"summary":"Returns the logarithmic access frequency counter of a Redis object.","tokens":[]},"object help":{"summary":"Returns helpful text about the different subcommands.","tokens":[]},"object idletime":{"summary":"Returns the time since the last access to a Redis object.","tokens":[]},"object refcount":{"summary":"Returns the reference count of a value of a key.","tokens":[]},"persist":{"summary":"Removes the expiration time of a key.","tokens":[]},"pexpire":{"summary":"Sets the expiration time of a key in milliseconds.","tokens":["nx","xx","gt","lt"]},"pexpireat":{"summary":"Sets the expiration time of a key to a Unix milliseconds timestamp.","tokens":["nx","xx","gt","lt"]},"pexpiretime":{"summary":"Returns the expiration time of a key as a Unix milliseconds timestamp.","tokens":[]},"pfadd":{"summary":"Adds elements to a HyperLogLog key. Creates the key if it doesn't exist.","tokens":[]},"pfcount":{"summary":"Returns the approximated cardinality of the set(s) observed by the HyperLogLog key(s).","tokens":[]},"pfmerge":{"summary":"Merges one or more HyperLogLog values into a single key.","tokens":[]},"ping":{"summary":"Returns the server's liveliness response.","tokens":[]},"psetex":{"summary":"Sets both string value and expiration time in milliseconds of a key. The key is created if it doesn't exist.","tokens":[]},"psubscribe":{"summary":"Listens for messages published to channels that match one or more patterns.","tokens":[]},"pttl":{"summary":"Returns the expiration time in milliseconds of a key.","tokens":[]},"publish":{"summary":"Posts a message to a channel.","tokens":[]},"pubsub":{"summary":"A container for Pub/Sub commands.","tokens":[]},"pubsub channels":{"summary":"Returns the active channels.","tokens":[]},"pubsub help":{"summary":"Returns helpful text about the different subcommands.","tokens":[]},"pubsub numpat":{"summary":"Returns a count of unique pattern subscriptions.","tokens":[]},"pubsub numsub":{"summary":"Returns a count of subscribers to channels.","tokens":[]},"pubsub shardchannels":{"summary":"Returns the active shard channels.","tokens":[]},"pubsub shardnumsub":{"summary":"Returns the count of subscribers of shard channels.","tokens":[]},"punsubscribe":{"summary":"Stops listening to messages published to channels that match one or more patterns.","tokens":[]},"quit":{"summary":"Closes the connection.","tokens":[]},"randomkey":{"summary":"Returns a random key name from the database.","tokens":[]},"rename":{"summary":"Renames a key and overwrites the destination.","tokens":[]},"renamenx":{"summary":"Renames a key only when the target key name doesn't exist.","tokens":[]},"reset":{"summary":"Resets the connection.","tokens":[]},"restore":{"summary":"Creates a key from the serialized representation of a value.","tokens":["replace","absttl","idletime","freq"]},"rpop":{"summary":"Returns and removes the last elements of a list. Deletes the list if the last element was popped.","tokens":[]},"rpoplpush":{"summary":"Returns the last element of a list after removing and pushing it to another list. Deletes the list if the last element was popped.","tokens":[]},"rpush":{"summary":"Appends one or more elements to a list. Creates the key if it doesn't exist.","tokens":[]},"rpushx":{"summary":"Appends an element to a list only when the list exists.","tokens":[]},"sadd":{"summary":"Adds one or more members to a set. Creates the key if it doesn't exist.","tokens":[]},"scan":{"summary":"Iterates over the key names in the database.","tokens":["match","count","type"]},"scard":{"summary":"Returns the number of members in a set.","tokens":[]},"script":{"summary":"A container for Lua scripts management commands.","tokens":[]},"script debug":{"summary":"Sets the debug mode of server-side Lua scripts.","tokens":["yes","sync","no"]},"script exists":{"summary":"Determines whether server-side Lua scripts exist in the script cache.","tokens":[]},"script flush":{"summary":"Removes all server-side Lua scripts from the script cache.","tokens":["async","sync"]},"script help":{"summary":"Returns helpful text about the different subcommands.","tokens":[]},"script kill":{"summary":"Terminates a server-side Lua script during execution.","tokens":[]},"script load":{"summary":"Loads a server-side Lua script to the script cache.","tokens":[]},"sdiff":{"summary":"Returns the difference of multiple sets.","tokens":[]},"sdiffstore":{"summary":"Stores the difference of multiple sets in a key.","tokens":[]},"select":{"summary":"Changes the selected database.","tokens":[]},"set":{"summary":"Sets the string value of a key, ignoring its type. The key is created if it doesn't exist.","tokens":["nx","xx","get","ex","px","exat","pxat","keepttl"]},"setbit":{"summary":"Sets or clears the bit at offset of the string value. Creates the key if it doesn't exist.","tokens":[]},"setex":{"summary":"Sets the string value and expiration time of a key. Creates the key if it doesn't exist.","tokens":[]},"setnx":{"summary":"Set the string value of a key only when the key doesn't exist.","tokens":[]},"setrange":{"summary":"Overwrites a part of a string value with another by an offset. Creates the key if it doesn't exist.","tokens":[]},"sflush":{"summary":"Remove all keys from selected range of slots.","tokens":["async","sync"]},"sinter":{"summary":"Returns the intersect of multiple sets.","tokens":[]},"sintercard":{"summary":"Returns the number of members of the intersect of multiple sets.","tokens":["limit"]},"sinterstore":{"summary":"Stores the intersect of multiple sets in a key.","tokens":[]},"sismember":{"summary":"Determines whether a member belongs to a set.","tokens":[]},"slowlog":{"summary":"A container for slow log commands.","tokens":[]},"slowlog get":{"summary":"Returns the slow log's entries.","tokens":[]},"slowlog help":{"summary":"Show helpful text about the different subcommands","tokens":[]},"slowlog len":{"summary":"Returns the number of entries in the slow log.","tokens":[]},"slowlog reset":{"summary":"Clears all entries from the slow log.","tokens":[]},"smembers":{"summary":"Returns all members of a set.","tokens":[]},"smismember":{"summary":"Determines whether multiple members belong to a set.","tokens":[]},"smove":{"summary":"Moves a member from one set to another.","tokens":[]},"sort":{"summary":"Sorts the elements in a list, a set, or a sorted set, optionally storing the result.","tokens":["by","limit","get","asc","desc","alpha","store"]},"sort_ro":{"summary":"Returns the sorted elements of a list, a set, or a sorted set.","tokens":["by","limit","get","asc","desc","alpha"]},"spop":{"summary":"Returns one or more random members from a set after removing them. Deletes the set if the last member was popped.","tokens":[]},"spublish":{"summary":"Post a message to a shard channel","tokens":[]},"srandmember":{"summary":"Get one or multiple random members from a set","tokens":[]},"srem":{"summary":"Removes one or more members from a set. Deletes the set if the last member was removed.","tokens":[]},"sscan":{"summary":"Iterates over members of a set.","tokens":["match","count"]},"ssubscribe":{"summary":"Listens for messages published to shard channels.","tokens":[]},"strlen":{"summary":"Returns the length of a string value.","tokens":[]},"subscribe":{"summary":"Listens for messages published to channels.","tokens":[]},"substr":{"summary":"Returns a substring from a string value.","tokens":[]},"sunion":{"summary":"Returns the union of multiple sets.","tokens":[]},"sunionstore":{"summary":"Stores the union of multiple sets in a key.","tokens":[]},"sunsubscribe":{"summary":"Stops listening to messages posted to shard channels.","tokens":[]},"tdigest.add":{"tokens":[]},"tdigest.byrank":{"tokens":[]},"tdigest.byrevrank":{"tokens":[]},"tdigest.cdf":{"tokens":[]},"tdigest.create":{"tokens":[]},"tdigest.info":{"tokens":[]},"tdigest.max":{"tokens":[]},"tdigest.merge":{"tokens":[]},"tdigest.min":{"tokens":[]},"tdigest.quantile":{"tokens":[]},"tdigest.rank":{"tokens":[]},"tdigest.reset":{"tokens":[]},"tdigest.revrank":{"tokens":[]},"tdigest.trimmed_mean":{"tokens":[]},"time":{"summary":"Returns the server time.","tokens":[]},"topk.add":{"tokens":[]},"topk.count":{"tokens":[]},"topk.incrby":{"tokens":[]},"topk.info":{"tokens":[]},"topk.list":{"tokens":[]},"topk.query":{"tokens":[]},"topk.reserve":{"tokens":[]},"touch":{"summary":"Returns the number of existing keys out of those specified after updating the time they were last accessed.","tokens":[]},"ts.add":{"tokens":[]},"ts.alter":{"tokens":[]},"ts.create":{"tokens":[]},"ts.createrule":{"tokens":[]},"ts.decrby":{"tokens":[]},"ts.del":{"tokens":[]},"ts.deleterule":{"tokens":[]},"ts.get":{"tokens":[]},"ts.incrby":{"tokens":[]},"ts.info":{"tokens":[]},"ts.madd":{"tokens":[]},"ts.mget":{"tokens":[]},"ts.mrange":{"tokens":[]},"ts.mrevrange":{"tokens":[]},"ts.queryindex":{"tokens":[]},"ts.range":{"tokens":[]},"ts.revrange":{"tokens":[]},"ttl":{"summary":"Returns the expiration time in seconds of a key.","tokens":[]},"type":{"summary":"Determines the type of value stored at a key.","tokens":[]},"unlink":{"summary":"Asynchronously deletes one or more keys.","tokens":[]},"unsubscribe":{"summary":"Stops listening to messages posted to channels.","tokens":[]},"unwatch":{"summary":"Forgets about watched keys of a transaction.","tokens":[]},"wait":{"summary":"Blocks until the asynchronous replication of all preceding write commands sent by the connection is completed.","tokens":[]},"waitaof":{"summary":"Blocks until all of the preceding write commands sent by the connection are written to the append-only file of the master and/or replicas.","tokens":[]},"watch":{"summary":"Monitors changes to keys to determine the execution of a transaction.","tokens":[]},"xack":{"summary":"Returns the number of messages that were successfully acknowledged by the consumer group member of a stream.","tokens":[]},"xadd":{"summary":"Appends a new message to a stream. Creates the key if it doesn't exist.","tokens":["nomkstream","maxlen","minid","=","~","limit","*"]},"xautoclaim":{"summary":"Changes, or acquires, ownership of messages in a consumer group, as if the messages were delivered to as consumer group member.","tokens":["count","justid"]},"xclaim":{"summary":"Changes, or acquires, ownership of a message in a consumer group, as if the message was delivered a consumer group member.","tokens":["idle","time","retrycount","force","justid","lastid"]},"xdel":{"summary":"Returns the number of messages after removing them from a stream.","tokens":[]},"xgroup":{"summary":"A container for consumer groups commands.","tokens":[]},"xgroup create":{"summary":"Creates a consumer group.","tokens":["$","mkstream","entriesread"]},"xgroup createconsumer":{"summary":"Creates a consumer in a consumer group.","tokens":[]},"xgroup delconsumer":{"summary":"Deletes a consumer from a consumer group.","tokens":[]},"xgroup destroy":{"summary":"Destroys a consumer group.","tokens":[]},"xgroup help":{"summary":"Returns helpful text about the different subcommands.","tokens":[]},"xgroup setid":{"summary":"Sets the last-delivered ID of a consumer group.","tokens":["$","entriesread"]},"xinfo":{"summary":"A container for stream introspection commands.","tokens":[]},"xinfo consumers":{"summary":"Returns a list of the consumers in a consumer group.","tokens":[]},"xinfo groups":{"summary":"Returns a list of the consumer groups of a stream.","tokens":[]},"xinfo help":{"summary":"Returns helpful text about the different subcommands.","tokens":[]},"xinfo stream":{"summary":"Returns information about a stream.","tokens":["full","count"]},"xlen":{"summary":"Return the number of messages in a stream.","tokens":[]},"xpending":{"summary":"Returns the information and entries from a stream consumer group's pending entries list.","tokens":["idle"]},"xrange":{"summary":"Returns the messages from a stream within a range of IDs.","tokens":["count"]},"xread":{"summary":"Returns messages from multiple streams with IDs greater than the ones requested. Blocks until a message is available otherwise.","tokens":["count","block","streams"]},"xreadgroup":{"summary":"Returns new or historical messages from a stream for a consumer in a group. Blocks until a message is available otherwise.","tokens":["group","count","block","noack","streams"]},"xrevrange":{"summary":"Returns the messages from a stream within a range of IDs in reverse order.","tokens":["count"]},"xsetid":{"summary":"An internal command for replicating stream values.","tokens":["entriesadded","maxdeletedid"]},"xtrim":{"summary":"Deletes messages from the beginning of a stream.","tokens":["maxlen","minid","=","~","limit"]},"zadd":{"summary":"Adds one or more members to a sorted set, or updates their scores. Creates the key if it doesn't exist.","tokens":["nx","xx","gt","lt","ch","incr"]},"zcard":{"summary":"Returns the number of members in a sorted set.","tokens":[]},"zcount":{"summary":"Returns the count of members in a sorted set that have scores within a range.","tokens":[]},"zdiff":{"summary":"Returns the difference between multiple sorted sets.","tokens":["withscores"]},"zdiffstore":{"summary":"Stores the difference of multiple sorted sets in a key.","tokens":[]},"zincrby":{"summary":"Increments the score of a member in a sorted set.","tokens":[]},"zinter":{"summary":"Returns the intersect of multiple sorted sets.","tokens":["weights","aggregate","sum","min","max","withscores"]},"zintercard":{"summary":"Returns the number of members of the intersect of multiple sorted sets.","tokens":["limit"]},"zinterstore":{"summary":"Stores the intersect of multiple sorted sets in a key.","tokens":["weights","aggregate","sum","min","max"]},"zlexcount":{"summary":"Returns the number of members in a sorted set within a lexicographical range.","tokens":[]},"zmpop":{"summary":"Returns the highest- or lowest-scoring members from one or more sorted sets after removing them. Deletes the sorted set if the last member was popped.","tokens":["min","max","count"]},"zmscore":{"summary":"Returns the score of one or more members in a sorted set.","tokens":[]},"zpopmax":{"summary":"Returns the highest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.","tokens":[]},"zpopmin":{"summary":"Returns the lowest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.","tokens":[]},"zrandmember":{"summary":"Returns one or more random members from a sorted set.","tokens":["withscores"]},"zrange":{"summary":"Returns members in a sorted set within a range of indexes.","tokens":["byscore","bylex","rev","limit","withscores"]},"zrangebylex":{"summary":"Returns members in a sorted set within a lexicographical range.","tokens":["limit"]},"zrangebyscore":{"summary":"Returns members in a sorted set within a range of scores.","tokens":["withscores","limit"]},"zrangestore":{"summary":"Stores a range of members from sorted set in a key.","tokens":["byscore","bylex","rev","limit"]},"zrank":{"summary":"Returns the index of a member in a sorted set ordered by ascending scores.","tokens":["withscore"]},"zrem":{"summary":"Removes one or more members from a sorted set. Deletes the sorted set if all members were removed.","tokens":[]},"zremrangebylex":{"summary":"Removes members in a sorted set within a lexicographical range. Deletes the sorted set if all members were removed.","tokens":[]},"zremrangebyrank":{"summary":"Removes members in a sorted set within a range of indexes. Deletes the sorted set if all members were removed.","tokens":[]},"zremrangebyscore":{"summary":"Removes members in a sorted set within a range of scores. Deletes the sorted set if all members were removed.","tokens":[]},"zrevrange":{"summary":"Returns members in a sorted set within a range of indexes in reverse order.","tokens":["withscores"]},"zrevrangebylex":{"summary":"Returns members in a sorted set within a lexicographical range in reverse order.","tokens":["limit"]},"zrevrangebyscore":{"summary":"Returns members in a sorted set within a range of scores in reverse order.","tokens":["withscores","limit"]},"zrevrank":{"summary":"Returns the index of a member in a sorted set ordered by descending scores.","tokens":["withscore"]},"zscan":{"summary":"Iterates over members and scores of a sorted set.","tokens":["match","count"]},"zscore":{"summary":"Returns the score of a member in a sorted set.","tokens":[]},"zunion":{"summary":"Returns the union of multiple sorted sets.","tokens":["weights","aggregate","sum","min","max","withscores"]},"zunionstore":{"summary":"Stores the union of multiple sorted sets in a key.","tokens":["weights","aggregate","sum","min","max"]}}
